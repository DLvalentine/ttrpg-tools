todo.bat:git grep -EIi "TODO|FIXME" >> TODO.txt
tools-libs/random-tables/data/manifest.yaml:# TODO would be nice to have a concept of ondemand/load-time if we end up with a sufficiently large number of tables
tools-libs/random-tables/data/tables/_template.yaml:# TODO: add supported flag documentation
tools-libs/random-tables/data/tables/_template.yaml:# TODO: add dependencies documentation
tools-libs/random-tables/data/tables/devLoot.yaml:  dependencies: [devGems] # TODO need to document this: can either be array of filenames in same path, or list of dependency objects: {tablename, filename, path} of which only two (tablename and path) are really required
tools-libs/random-tables/data/tables/devLoot.yaml:    flags: [nested_contents, plural] # TODO document flags
tools-libs/random-tables/data/tables/devLoot.yaml:    quantity: [1, 4] # TODO document quantity field
tools-libs/random-tables/random-tables.js:// TODO: document flags in _template.yaml
tools-libs/random-tables/random-tables.js:// TODO: display style? would be cool to display things instead of dumping the table. Could use YAML's multi-line string thing and add the field like so: [result] to "inject" it
tools-libs/random-tables/random-tables.js:// TODO: printf formatting in tables? Should that be another flag? Should that just be the multi-line thing I describe above?
tools-libs/random-tables/random-tables.js:// TODO: plural nested rolls are especially bad, but not horrible. I think they could benefit most from this.
tools-libs/random-tables/random-tables.js:                            // TODO: call rollNested _.times(quantity) or whatever and merge
tools-libs/random-tables/random-tables.js:// TODO if I plan to use this with further projects (UNE or Mythic GME tool?), we should not assume we want to load from manifest by default
tools-libs/random-tables/random-tables.js:// TODO ^ if that's done, we probably want to expose loadTablesFromManifest and loadTable, too, and remove `tables` - which would require usage updates
ttrpg-tools.js:// TODO: Would be nice to have mythic gme tools as their own lib. 
ttrpg-tools.js:// TODO: same as above, but with other tools like UNE.
ttrpg-tools.js:let rl = readline.createInterface({ input, output, prompt: '>' }); // TODO > prompt, history would be nice to have (prompt doesn't seem to work here?)
ttrpg-tools.js:    // FIXME: we should check to make sure this file exists before continuing
ttrpg-tools.js:    // FIXME: see above
ttrpg-tools.js:    // TODO: 9 times out of 10 I want to open or view the file after generating it, maybe have explorer open when we're done? or ask user if they want that?
